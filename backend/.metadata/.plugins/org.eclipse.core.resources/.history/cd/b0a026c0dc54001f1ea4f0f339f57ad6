package com.Contabilidad.AvaliaNFs.domain;

import java.io.Serializable;
import java.util.Objects;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Table;

import org.springframework.data.annotation.Id;

import lombok.Data;
import lombok.EqualsAndHashCode;

@Entity
@Data
@Table(name = "CLIENTE")
@EqualsAndHashCode(of = "id", callSuper = false)
public class Cliente implements Serializable {
	private static final long serialVersionUID = 1L;
	
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private Long    id;
	private String  nome;
	private String  email;
	private Long    cnpj;
	private String  logradouro;
	private String  numero;
	private String  complemento;
	private String  bairro;
	private Integer cep;
	
	//@OneToMany(mappedBy="cliente")
	//private List<Endereco> enderecos = new ArrayList<>();
	
	//@ElementCollection
	//@CollectionTable(name="TELEFONE")
	//private Set<String> telefones = new HashSet<>();
	
	public Cliente() {
	}

	public Cliente(Long id, String nome, String email, Long cnpj, String logradouro, String numero, String complemento,
			String bairro, Integer cep) {
		super();
		this.id = id;
		this.nome = nome;
		this.email = email;
		this.cnpj = cnpj;
		this.logradouro = logradouro;
		this.numero = numero;
		this.complemento = complemento;
		this.bairro = bairro;
		this.cep = cep;
	}

	@Override
	public int hashCode() {
		return Objects.hash(id);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Cliente other = (Cliente) obj;
		return Objects.equals(id, other.id);
	}

	
	
}
